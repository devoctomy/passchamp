name: CICD

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
permissions:
  actions: read
  contents: read
  security-events: write

env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry

jobs:

  tests:
    name: Build & Tests
    runs-on: windows-2022
    
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 8.0.x
      - name: Install maui workloads
        run: dotnet workload install maui-android
      - name: Install dependencies
        run: dotnet restore --source https://api.nuget.org/v3/index.json 
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Run Unit Tests
        run: dotnet test --no-restore --verbosity normal --filter "FullyQualifiedName~UnitTests" -p:CollectCoverage=true -p:CoverletOutputFormat="json%2copencover" -p:CoverletOutput="../coverage" -p:MergeWith="../coverage.json" -c Release --no-build devoctomy.Passchamp.sln
      - name: Code Coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage.opencover.xml
          commit_parent: $(git rev-parse --short "$GITHUB_SHA")
          fail_ci_if_error: true
          verbose: false
      - name: Run Integration Tests
        run: dotnet test --no-restore --verbosity normal --filter "FullyQualifiedName~IntTests" -c Release --no-build devoctomy.Passchamp.sln

  security-scan:
    name: Security Scan
    needs: tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@v4
        with:
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
      
      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: results.sarif
          
  build-windows:
    name: Windows Build
    needs: security-scan
    runs-on: windows-2022
    if: always()
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x
          include-prerelease: true

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-prerelease: true

      - name: Install MAUI Workloads
        run: |
          dotnet workload install maui --ignore-failed-sources
      - name: Restore Dependencies
        run: dotnet restore devoctomy.Passchamp.Client/devoctomy.Passchamp.Client.csproj
      - name: Build MAUI Windows
        run: dotnet build devoctomy.Passchamp.Client/devoctomy.Passchamp.Client.csproj -c Release -f net8.0-windows10.0.19041.0 --no-restore
      - name: Publish application
        run: dotnet publish devoctomy.Passchamp.Client/devoctomy.Passchamp.Client.csproj -c Release -f net8.0-windows10.0.19041.0
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: windows-ci-build
          path: devoctomy.Passchamp.Client/bin/Release/net8.0-windows*/**/*.msix

  build-android:
    name: Android Build
    needs: security-scan
    runs-on: windows-2022
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x
          include-prerelease: true

      - uses: actions/setup-java@v2
        with:
          distribution: 'microsoft'
          java-version: '11'

      - name: Install MAUI Workloads
        run: |
          dotnet workload install android --ignore-failed-sources
          dotnet workload install maui --ignore-failed-sources

      - name: Restore Dependencies
        run: dotnet restore devoctomy.Passchamp.Client/devoctomy.Passchamp.Client.csproj

      - name: Build MAUI Android
        run: dotnet build devoctomy.Passchamp.Client/devoctomy.Passchamp.Client.csproj -c Release -f net8.0-android --no-restore

      - name: Upload Android Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: android-ci-build
          path: devoctomy.Passchamp.Client/bin/Release/net8.0-android/*Signed.a*
          
  release:
    name: Create Release and Upload Artifacts
    needs: [build-windows, build-android]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: ${{ github.ref != 'refs/heads/main' }}
          prerelease: false

      - name: Download Windows Artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-ci-build

      - name: Download Android Artifact
        uses: actions/download-artifact@v2
        with:
          name: android-ci-build

      - name: Upload Windows Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-ci-build/*.msix
          asset_name: windows-ci-build.msix
          asset_content_type: application/vnd.ms-package

      - name: Upload Android Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./android-ci-build/*Signed.apk
          asset_name: android-ci-build.apk
          asset_content_type: application/vnd.android.package-archive

